/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

/**
 *
 * @author Tho
 */
import controller.Controller;
import java.util.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.*;
import javax.swing.*;
import javax.swing.table.*;
public class WorkCalculatorView extends javax.swing.JFrame {

    /**
     * Creates new form WorkCalculatorView
     */
    private DefaultTableModel model = null;
    private List<Factory> l2 = null;
    private List<Worker> l1 = null;
    private List<WorkCalculator> l3 = null;
    public WorkCalculatorView() throws IOException, ClassNotFoundException {
        initComponents();
        model = (DefaultTableModel) workCalTable.getModel();
        l1 = Controller.readFromFile("CN.TXT");
        l2 = Controller.readFromFile("XSX.TXT");
        l3 = Controller.readFromFile("QLCN.TXT");
        for (WorkCalculator w : l3){
            if (w.getFactory() == null || w.getWorker() == null) break;
            model.addRow(new Object[]{w.getWorker().getId(),w.getWorker().getName(),w.getFactory().getId(),w.getFactory().getName(),w.getDays()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        workerF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        factoryF = new javax.swing.JTextField();
        dayF = new javax.swing.JTextField();
        addB = new javax.swing.JButton();
        sort1B = new javax.swing.JButton();
        sort2B = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workCalTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("worker id");

        jLabel2.setText("factory id");

        jLabel3.setText("day number");

        addB.setText("add and save");
        addB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBActionPerformed(evt);
            }
        });

        sort1B.setText("sort by worker name");
        sort1B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sort1BActionPerformed(evt);
            }
        });

        sort2B.setText("sort by factory name");
        sort2B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sort2BActionPerformed(evt);
            }
        });

        workCalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id worker", "worker name", "id factory", "factory name", "day number"
            }
        ));
        jScrollPane1.setViewportView(workCalTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(60, 60, 60)
                                .addComponent(dayF, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(71, 71, 71)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(workerF, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                                    .addComponent(factoryF)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(addB)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sort1B)
                        .addGap(64, 64, 64)
                        .addComponent(sort2B))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(workerF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(factoryF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(93, 93, 93)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(dayF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addB)
                    .addComponent(sort1B)
                    .addComponent(sort2B))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBActionPerformed
        try{
            int idWorker = Integer.parseInt(workerF.getText());
            boolean check = false;
            for (Worker w : l1){
                if (w.getId() == idWorker){
                    check = true;
                    break;
                }
            }
            if (!check) throw new Ex();
            check = false;
            int idFactory = Integer.parseInt(factoryF.getText());
            for (Factory f : l2){
                if (f.getId() == idFactory){
                    check = true;
                    break;
                }
            }
            if (!check) throw new Ex();
            check = false;
            int days = Integer.parseInt(dayF.getText());
            if (days <= 0 || days > 30) throw new Ex();
            int total = 0;
            for (WorkCalculator w : l3){
                        if (w.getFactory() == null || w.getWorker() == null) break;
                        if (w.getWorker().getId() == idWorker) total += w.getDays();
                        
                    }
            for (WorkCalculator w : l3){
                if (w.getFactory() == null || w.getWorker() == null) break;
                if (w.getFactory().getId() == idFactory && w.getWorker().getId() == idWorker){
                    total -= w.getDays();
                    
                    if (days + total > 30) throw new Ex();
                    w.setDays(days);
                    check = true;
                    break;
                }
            }
            int count = 0;
            if(!check){
                for (WorkCalculator w : l3){
                    if (w.getFactory() == null || w.getWorker() == null) break;
                    count++;
                    if (count > 0) break;
                }
            
                Worker worker = null;
                Factory factory = null;
                if (count == 0){
                    for (Worker w : l1){
                        if (w.getId() == idWorker){
                            worker = w;
                            break;
                        }
                    }
                    for (Factory f : l2){
                        if (f.getId() == idFactory){
                            factory = f;
                            break;
                        }
                    }
                    l3.add(new WorkCalculator(factory,worker,days));
                }
                else{
                    
                    
                    
                    if (total + days > 30) throw new Ex();
                    for (Worker w : l1){
                        if (w.getId() == idWorker){
                            worker = w;
                            break;
                        }
                    }
                    for (Factory f : l2){
                        if (f.getId() == idFactory){
                            factory = f;
                            break;
                        }
                    }
                    l3.add(new WorkCalculator(factory,worker,days));

                }
            }
            Controller.writeToFile("QLCN.TXT", l3);
            model.setRowCount(0);
            for (WorkCalculator w : l3){
                if (w.getFactory() == null || w.getWorker() == null) break;
                model.addRow(new Object[]{w.getWorker().getId(),w.getWorker().getName(),w.getFactory().getId(),w.getFactory().getName(),w.getDays()});
            }
            
        }
        catch(Ex e){
            e.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_addBActionPerformed

    private void sort1BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sort1BActionPerformed
        try{
            List<WorkCalculator> res = Controller.sortByWorkerName(l3);
            if (res.size() <= 0) throw new Ex();
            model.setRowCount(0);
            for (WorkCalculator w : res){
                if (w.getFactory() == null || w.getWorker() == null) break;
                model.addRow(new Object[]{w.getWorker().getId(),w.getWorker().getName(),w.getFactory().getId(),w.getFactory().getName(),w.getDays()});
            }
        }
        catch(Ex e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_sort1BActionPerformed

    private void sort2BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sort2BActionPerformed
        try{
            List<WorkCalculator> res = Controller.sortByFactoryName(l3);
            if (res.size() <= 0) throw new Ex();
            model.setRowCount(0);
            for (WorkCalculator w : res){
                if (w.getFactory() == null || w.getWorker() == null) break;
                model.addRow(new Object[]{w.getWorker().getId(),w.getWorker().getName(),w.getFactory().getId(),w.getFactory().getName(),w.getDays()});
            }
        }
        catch(Ex e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_sort2BActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WorkCalculatorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WorkCalculatorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WorkCalculatorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WorkCalculatorView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new WorkCalculatorView().setVisible(true);
                } catch (IOException ex) {
                    ex.printStackTrace();
                } catch (ClassNotFoundException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addB;
    private javax.swing.JTextField dayF;
    private javax.swing.JTextField factoryF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sort1B;
    private javax.swing.JButton sort2B;
    private javax.swing.JTable workCalTable;
    private javax.swing.JTextField workerF;
    // End of variables declaration//GEN-END:variables
}
